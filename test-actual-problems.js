// Test the specific captions from the travel data
const { countryList, locationPatterns } = require('./scripts/location-patterns.js');

// Location mapping for countries and cities  
const locationMap = {
    // Countries
    'Peru': { country: 'Peru', coordinates: [-9.19, -75.0152] },
    'Bolivia': { country: 'Bolivia', coordinates: [-16.2902, -63.5887] },
    'Malaysia': { country: 'Malaysia', coordinates: [4.2105, 101.9758] },
    
    // Cities
    'La Paz': { city: 'La Paz', country: 'Bolivia', coordinates: [-16.5000, -68.1193] },
    'Kapailai': { city: 'Kapailai', country: 'Malaysia', coordinates: [4.635, 118.628] },
    'Lima': { city: 'Lima', country: 'Peru', coordinates: [-12.0464, -77.0428] },
    'Cusco': { city: 'Cusco', country: 'Peru', coordinates: [-13.5319, -71.9675] },
    'Kuala Lumpur': { city: 'Kuala Lumpur', country: 'Malaysia', coordinates: [3.139, 101.6869] },
};

function parseLocationMatch(match, type, caption) {
    console.log(`üîç Pattern matched: type="${type}", match="${match}"`);
    
    switch (type) {
        case 'country_dot_city':
            const parts = match.split(/\s*‚Ä¢\s*/);
            if (parts.length === 2) {
                const country = parts[0].trim();
                const city = parts[1].trim();
                console.log(`   Country‚Ä¢City pattern: "${country}" ‚Ä¢ "${city}"`);
                
                if (countryList.some(c => c.toLowerCase() === country.toLowerCase())) {
                    return { country, city, coordinates: getCoordinates(city, country) };
                }
            }
            break;
            
        case 'city_country':
            const cityCountryParts = match.split(',');
            if (cityCountryParts.length === 2) {
                const city = cityCountryParts[0].trim();
                const country = cityCountryParts[1].trim();
                return { country, city, coordinates: getCoordinates(city, country) };
            }
            break;
            
        case 'country':
            const country = match.trim();
            console.log(`   Country-only pattern: "${country}"`);
            return { country, city: null, coordinates: getCoordinates(null, country) };
    }
    
    return null;
}

function getCoordinates(city, country) {
    if (city && locationMap[city]) return locationMap[city].coordinates;
    if (country && locationMap[country]) return locationMap[country].coordinates;
    return null;
}

function extractLocationFromCaption(caption) {
    console.log(`\nüìù Processing caption: "${caption.substring(0, 100)}..."`);
    
    for (const pattern of locationPatterns) {
        const match = caption.match(pattern.regex);
        if (match) {
            console.log(`‚úÖ Regex matched: ${pattern.regex} (type: ${pattern.type})`);
            console.log(`   Full match: "${match[0]}", Groups: [${match.slice(1).join(', ')}]`);
            
            // For country_dot_city pattern, pass the full match
            const matchToProcess = pattern.type === 'country_dot_city' ? match[0] : (match[1] || match[0]);
            
            const result = parseLocationMatch(matchToProcess, pattern.type, caption);
            if (result) {
                console.log(`üéØ Location extracted: ${JSON.stringify(result)}`);
                return result;
            }
        }
    }
    
    console.log("‚ùå No location found");
    return { country: null, city: null, coordinates: null };
}

// Test the actual problematic captions from travel-data.json
const problematicCaptions = [
    {
        name: "Peru post (BvopOIqFv8Q) - was extracting 'ÈÄôÁöÑÁêÜÁî±'",  
        caption: "Peru \nÁßòÈ≠Ø .\n.\nÊòØÂõ†ÁÇ∫ÊúâÂá∫ÁôºÁöÑÁêÜÁî±\nÈÇÑÊòØÊ≤íÊúâÁïôÂú®ÈÄôÁöÑÁêÜÁî±\nËÄåÈÅ∏ÊìáÂá∫Ëµ∞Ôºü\n.\n.\n#verasworld #adventure #explore #travelphotography #traveltheworld #travelblogger #backpacking #peru #lifequotes #outdoors #trip  #tbt #memory #traveler",
        currentWrong: "ÈÄôÁöÑÁêÜÁî±",
        expected: { country: "Peru", city: null }
    },
    {
        name: "Bolivia ‚Ä¢ La Paz post (BveWGJgFRma) - was extracting ÁæéÂúãÊ≤íÊúâÈáçÊñ∞ÊãçÈ†≠Ë≤º", 
        caption: "Bolivia ‚Ä¢ La Paz\nÁéªÂà©Á∂≠‰∫û ‚Ä¢ È¶ñÈÉΩ\n.\n.\nÊãçÂÆåÈÄôÂºµÁÖßÁâáÁöÑ‰∏ã‰∏ÄÁßí\nÈñãÂßã‰∏ãÂ§ßÈõ®Â§æÈõúËëó\nÈÄôÂÄãÊ∞£ÂÄôÂïä‚ãØ\n.\n.\nBolivia ÁöÑÁ∞ΩË≠âÊòØÊàëËæ¶ÈÅéÊúÄÈö®ÊÄßÁöÑ‰∏ÄÂÄã\nÁî±ÊñºÂú®ÁæéÂúãÊ≤íÊúâÈáçÊñ∞ÊãçÈ†≠Ë≤º\nÊàëÁî®ÊâãÊ©üÁøªÊãç‰∫ÜÂºµ‰ª•Ââç‰∏âÂõõÂπ¥ÂâçÊãçÁöÑÂæåÁõ¥Êé•‰∏äÂÇ≥Á∞ΩË≠âÁ≥ªÁµ±\n‰∏äÂÇ≥ÁöÑÁÖßÁâáÈÇÑÊòØÊ©´ÁöÑ  ‰πüÊ≤íÊúâË£ÅÂàáË∂ÖÂá∫ÁöÑÈÉ®ÂàÜ\nÁµêÊûúÂà∞ÁßòÈ≠ØÁöÑÁéªÂà©Á∂≠‰∫ûËæ¶‰∫ãËôï\nÊãøÂà∞‰∫ÜËÅΩË™™ÊúâÈªûÈ∫ªÁÖ©ÁöÑÁ∞ΩË≠â\n‰∏äÈù¢ÁöÑÁÖßÁâáÂ∞±ÊòØÁõ¥Êé•Ëº∏Âá∫ È†≠‰πüÊòØÊ©´ÁöÑÂë¢ ü§óü§óü§ó\nÊàëË¶∫ÂæóÂçóÁæéÊ¥≤ÁöÑÁ∞ΩË≠âÊúÄÊñπ‰æøÂ∞±ÊòØÂà∞Áï∂Âú∞Ëæ¶ÁêÜ \nÁßòÈ≠Ø‰∏çÁî®Á∞ΩË≠â ÂæàÈÅ©ÂêàÂÖàÁï∂Á¨¨‰∏ÄÂÄãÂÅúÁïôÈªûÊêûÂÆöÂÖ∂‰ªñÂúãÂÆ∂ÁöÑÁ∞ΩË≠âüí™üí™\n.\n.\n#verasworld #travelphotography #travelblogger #backpacking #bolivia #lapaz #travelblogger #capital #travel #traveltheworld #traveltips #explore #adventure",
        currentWrong: "ÁæéÂúãÊ≤íÊúâÈáçÊñ∞ÊãçÈ†≠Ë≤º",
        expected: { country: "Bolivia", city: "La Paz" }
    },
    {
        name: "Malaysia ‚Ä¢ Kapailai post - was extracting 'Áù°Ë¶∫ÊôÇÂÄôÊÉ≥‰∫ãÊÉÖ'",
        caption: "Malaysia ‚Ä¢ Kapailai \nÈ¶¨‰æÜË•ø‰∫û ‚Ä¢ Âç°Â∏ï‰æÜ\n.\n.\nÊúâ‰∫∫Ë™™Áù°Ë¶∫ÁöÑÊôÇÂÄô\nËÖ¶Ë¢ãÊúÉÈáçÁµÑ‰∏ÄÊ¨°‰ªäÂ§©ÁôºÁîüÁöÑ‰∫ãÊÉÖ\nÊääË©≤Ë®òÊÜ∂ÁöÑÊù±Ë•øÊîæÂà∞Ê∑±Â±§Ë®òÊÜ∂Ë£°\nË©≤ÂøòË®òÁöÑÊù±Ë•øÊ∏ÖÊéâ\nÈóúÊñºÈÄôÈªûÊàëÊÑüÂêåË∫´Âèó\n.\n.\nÊàëÂæàÂ∏∏ÊúÉÊúâÊÑèË≠òÊÑüÂèóÂà∞\nÂú®Áù°Ë¶∫ÊôÇÂÄôÊÉ≥‰∫ãÊÉÖ\nÊÉ≥ËëóÊÉ≥Ëëó\nÂïèÈ°åÂ∞±Âú®Â§¢‰∏≠Ëß£Èñã‰∫Ü\nÂâçÂπæÂ§©Âú®Â§¢‰∏≠\nÂèà‰∏çÂ∞èÂøÉËß£‰∫Ü‰∏ÄÈ°å\n‰Ω†Áúã\n‰∫∫ÁîüÂæàÁ∞°ÂñÆÁöÑ\n.\n.\n#verasworld #explore #malaysia #kapalai #travelphotography #sipadan #travelblogger #Á©∫Êãç",
        currentWrong: "Áù°Ë¶∫ÊôÇÂÄôÊÉ≥‰∫ãÊÉÖ", 
        expected: { country: "Malaysia", city: "Kapailai" }
    }
];

console.log("üîç Testing ACTUAL Problematic Captions from travel-data.json\n");
console.log("=" + "=".repeat(60));

problematicCaptions.forEach((test, index) => {
    console.log(`\n${index + 1}. ${test.name}`);
    console.log(`‚ùå Currently wrong: "${test.currentWrong}"`);
    console.log("-".repeat(50));
    
    const result = extractLocationFromCaption(test.caption);
    
    console.log("Expected:", JSON.stringify(test.expected));
    console.log("Got:     ", JSON.stringify(result));
    
    const matches = (
        result.country === test.expected.country &&
        result.city === test.expected.city
    );
    
    console.log(matches ? "‚úÖ FIXED!" : "‚ùå Still broken");
});

console.log("\n" + "=".repeat(60));
console.log("üéØ Our fixes should resolve all these location parsing issues!");
